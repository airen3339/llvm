// Code generated by "string2enum -linecomment -type FuncAttr ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.FuncAttrAlwaysInline-0]
	_ = x[enum.FuncAttrArgMemOnly-1]
	_ = x[enum.FuncAttrBuiltin-2]
	_ = x[enum.FuncAttrCold-3]
	_ = x[enum.FuncAttrConvergent-4]
	_ = x[enum.FuncAttrHot-5]
	_ = x[enum.FuncAttrInaccessibleMemOnly-6]
	_ = x[enum.FuncAttrInaccessibleMemOrArgMemOnly-7]
	_ = x[enum.FuncAttrInlineHint-8]
	_ = x[enum.FuncAttrJumpTable-9]
	_ = x[enum.FuncAttrMinSize-10]
	_ = x[enum.FuncAttrMustProgress-11]
	_ = x[enum.FuncAttrNaked-12]
	_ = x[enum.FuncAttrNoBuiltin-13]
	_ = x[enum.FuncAttrNoCallback-14]
	_ = x[enum.FuncAttrNoCFCheck-15]
	_ = x[enum.FuncAttrNoDuplicate-16]
	_ = x[enum.FuncAttrNoFree-17]
	_ = x[enum.FuncAttrNoImplicitFloat-18]
	_ = x[enum.FuncAttrNoInline-19]
	_ = x[enum.FuncAttrNoMerge-20]
	_ = x[enum.FuncAttrNonLazyBind-21]
	_ = x[enum.FuncAttrNoProfile-22]
	_ = x[enum.FuncAttrNoRecurse-23]
	_ = x[enum.FuncAttrNoRedZone-24]
	_ = x[enum.FuncAttrNoReturn-25]
	_ = x[enum.FuncAttrNoSanitizeCoverage-26]
	_ = x[enum.FuncAttrNoSync-27]
	_ = x[enum.FuncAttrNoUnwind-28]
	_ = x[enum.FuncAttrNullPointerIsValid-29]
	_ = x[enum.FuncAttrOptForFuzzing-30]
	_ = x[enum.FuncAttrOptNone-31]
	_ = x[enum.FuncAttrOptSize-32]
	_ = x[enum.FuncAttrReadNone-33]
	_ = x[enum.FuncAttrReadOnly-34]
	_ = x[enum.FuncAttrReturnsTwice-35]
	_ = x[enum.FuncAttrSafeStack-36]
	_ = x[enum.FuncAttrSanitizeAddress-37]
	_ = x[enum.FuncAttrSanitizeHWAddress-38]
	_ = x[enum.FuncAttrSanitizeMemory-39]
	_ = x[enum.FuncAttrSanitizeMemTag-40]
	_ = x[enum.FuncAttrSanitizeThread-41]
	_ = x[enum.FuncAttrShadowCallStack-42]
	_ = x[enum.FuncAttrSpeculatable-43]
	_ = x[enum.FuncAttrSpeculativeLoadHardening-44]
	_ = x[enum.FuncAttrSSP-45]
	_ = x[enum.FuncAttrSSPReq-46]
	_ = x[enum.FuncAttrSSPStrong-47]
	_ = x[enum.FuncAttrStrictFP-48]
	_ = x[enum.FuncAttrUwtable-49]
	_ = x[enum.FuncAttrWillReturn-50]
	_ = x[enum.FuncAttrWriteOnly-51]
}

const _FuncAttr_name = "alwaysinlineargmemonlybuiltincoldconvergenthotinaccessiblememonlyinaccessiblemem_or_argmemonlyinlinehintjumptableminsizemustprogressnakednobuiltinnocallbacknocf_checknoduplicatenofreenoimplicitfloatnoinlinenomergenonlazybindnoprofilenorecursenoredzonenoreturnnosanitize_coveragenosyncnounwindnull_pointer_is_validoptforfuzzingoptnoneoptsizereadnonereadonlyreturns_twicesafestacksanitize_addresssanitize_hwaddresssanitize_memorysanitize_memtagsanitize_threadshadowcallstackspeculatablespeculative_load_hardeningsspsspreqsspstrongstrictfpuwtablewillreturnwriteonly"

var _FuncAttr_index = [...]uint16{0, 12, 22, 29, 33, 43, 46, 65, 94, 104, 113, 120, 132, 137, 146, 156, 166, 177, 183, 198, 206, 213, 224, 233, 242, 251, 259, 278, 284, 292, 313, 326, 333, 340, 348, 356, 369, 378, 394, 412, 427, 442, 457, 472, 484, 510, 513, 519, 528, 536, 543, 553, 562}

// FuncAttrFromString returns the FuncAttr enum corresponding to s.
func FuncAttrFromString(s string) enum.FuncAttr {
	if len(s) == 0 {
		return 0
	}
	for i := range _FuncAttr_index[:len(_FuncAttr_index)-1] {
		if s == _FuncAttr_name[_FuncAttr_index[i]:_FuncAttr_index[i+1]] {
			return enum.FuncAttr(i)
		}
	}
	panic(fmt.Errorf("unable to locate FuncAttr enum corresponding to %q", s))
}

func _(s string) {
	// Check for duplicate string values in type "FuncAttr".
	switch s {
	// 0
	case "alwaysinline":
	// 1
	case "argmemonly":
	// 2
	case "builtin":
	// 3
	case "cold":
	// 4
	case "convergent":
	// 5
	case "hot":
	// 6
	case "inaccessiblememonly":
	// 7
	case "inaccessiblemem_or_argmemonly":
	// 8
	case "inlinehint":
	// 9
	case "jumptable":
	// 10
	case "minsize":
	// 11
	case "mustprogress":
	// 12
	case "naked":
	// 13
	case "nobuiltin":
	// 14
	case "nocallback":
	// 15
	case "nocf_check":
	// 16
	case "noduplicate":
	// 17
	case "nofree":
	// 18
	case "noimplicitfloat":
	// 19
	case "noinline":
	// 20
	case "nomerge":
	// 21
	case "nonlazybind":
	// 22
	case "noprofile":
	// 23
	case "norecurse":
	// 24
	case "noredzone":
	// 25
	case "noreturn":
	// 26
	case "nosanitize_coverage":
	// 27
	case "nosync":
	// 28
	case "nounwind":
	// 29
	case "null_pointer_is_valid":
	// 30
	case "optforfuzzing":
	// 31
	case "optnone":
	// 32
	case "optsize":
	// 33
	case "readnone":
	// 34
	case "readonly":
	// 35
	case "returns_twice":
	// 36
	case "safestack":
	// 37
	case "sanitize_address":
	// 38
	case "sanitize_hwaddress":
	// 39
	case "sanitize_memory":
	// 40
	case "sanitize_memtag":
	// 41
	case "sanitize_thread":
	// 42
	case "shadowcallstack":
	// 43
	case "speculatable":
	// 44
	case "speculative_load_hardening":
	// 45
	case "ssp":
	// 46
	case "sspreq":
	// 47
	case "sspstrong":
	// 48
	case "strictfp":
	// 49
	case "uwtable":
	// 50
	case "willreturn":
	// 51
	case "writeonly":
	}
}
