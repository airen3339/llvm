// Code generated by "string2enum -linecomment -type ParamAttr ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.ParamAttrImmArg-0]
	_ = x[enum.ParamAttrInReg-1]
	_ = x[enum.ParamAttrNest-2]
	_ = x[enum.ParamAttrNoAlias-3]
	_ = x[enum.ParamAttrNoCapture-4]
	_ = x[enum.ParamAttrNoFree-5]
	_ = x[enum.ParamAttrNonNull-6]
	_ = x[enum.ParamAttrNoUndef-7]
	_ = x[enum.ParamAttrReadNone-8]
	_ = x[enum.ParamAttrReadOnly-9]
	_ = x[enum.ParamAttrReturned-10]
	_ = x[enum.ParamAttrSignExt-11]
	_ = x[enum.ParamAttrSwiftAsync-12]
	_ = x[enum.ParamAttrSwiftError-13]
	_ = x[enum.ParamAttrSwiftSelf-14]
	_ = x[enum.ParamAttrWriteOnly-15]
	_ = x[enum.ParamAttrZeroExt-16]
}

const _ParamAttr_name = "immarginregnestnoaliasnocapturenofreenonnullnoundefreadnonereadonlyreturnedsignextswiftasyncswifterrorswiftselfwriteonlyzeroext"

var _ParamAttr_index = [...]uint8{0, 6, 11, 15, 22, 31, 37, 44, 51, 59, 67, 75, 82, 92, 102, 111, 120, 127}

// ParamAttrFromString returns the ParamAttr enum corresponding to s.
func ParamAttrFromString(s string) enum.ParamAttr {
	if len(s) == 0 {
		return 0
	}
	for i := range _ParamAttr_index[:len(_ParamAttr_index)-1] {
		if s == _ParamAttr_name[_ParamAttr_index[i]:_ParamAttr_index[i+1]] {
			return enum.ParamAttr(i)
		}
	}
	panic(fmt.Errorf("unable to locate ParamAttr enum corresponding to %q", s))
}

func _(s string) {
	// Check for duplicate string values in type "ParamAttr".
	switch s {
	// 0
	case "immarg":
	// 1
	case "inreg":
	// 2
	case "nest":
	// 3
	case "noalias":
	// 4
	case "nocapture":
	// 5
	case "nofree":
	// 6
	case "nonnull":
	// 7
	case "noundef":
	// 8
	case "readnone":
	// 9
	case "readonly":
	// 10
	case "returned":
	// 11
	case "signext":
	// 12
	case "swiftasync":
	// 13
	case "swifterror":
	// 14
	case "swiftself":
	// 15
	case "writeonly":
	// 16
	case "zeroext":
	}
}
