// Code generated by "string2enum -linecomment -type AllocKind ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.AllocKindAlloc-1]
	_ = x[enum.AllocKindRealloc-2]
	_ = x[enum.AllocKindFree-4]
	_ = x[enum.AllocKindUninitialized-8]
	_ = x[enum.AllocKindZeroed-16]
	_ = x[enum.AllocKindAligned-32]
}

const (
	_AllocKind_name_0 = "allocrealloc"
	_AllocKind_name_1 = "free"
	_AllocKind_name_2 = "uninitialized"
	_AllocKind_name_3 = "zeroed"
	_AllocKind_name_4 = "aligned"
)

var (
	_AllocKind_index_0 = [...]uint8{0, 5, 12}
)

// AllocKindFromString returns the AllocKind enum corresponding to s.
func AllocKindFromString(s string) enum.AllocKind {
	if len(s) == 0 {
		return 0
	}
	for i := range _AllocKind_index_0[:len(_AllocKind_index_0)-1] {
		if s == _AllocKind_name_0[_AllocKind_index_0[i]:_AllocKind_index_0[i+1]] {
			return enum.AllocKind(i + 1)
		}
	}
	if s == _AllocKind_name_1 {
		return enum.AllocKind(4)
	}
	if s == _AllocKind_name_2 {
		return enum.AllocKind(8)
	}
	if s == _AllocKind_name_3 {
		return enum.AllocKind(16)
	}
	if s == _AllocKind_name_4 {
		return enum.AllocKind(32)
	}
	panic(fmt.Errorf("unable to locate AllocKind enum corresponding to %q", s))
}

func _(s string) {
	// Check for duplicate string values in type "AllocKind".
	switch s {
	// 1
	case "alloc":
	// 2
	case "realloc":
	// 4
	case "free":
	// 8
	case "uninitialized":
	// 16
	case "zeroed":
	// 32
	case "aligned":
	}
}
