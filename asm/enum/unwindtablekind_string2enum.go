// Code generated by "string2enum -linecomment -type UnwindTableKind ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.UnwindTableKindNone-0]
	_ = x[enum.UnwindTableKindSync-1]
	_ = x[enum.UnwindTableKindASync-2]
}

const _UnwindTableKind_name = "nonesyncasync"

var _UnwindTableKind_index = [...]uint8{0, 4, 8, 13}

// UnwindTableKindFromString returns the UnwindTableKind enum corresponding to s.
func UnwindTableKindFromString(s string) enum.UnwindTableKind {
	if len(s) == 0 {
		return 0
	}
	for i := range _UnwindTableKind_index[:len(_UnwindTableKind_index)-1] {
		if s == _UnwindTableKind_name[_UnwindTableKind_index[i]:_UnwindTableKind_index[i+1]] {
			return enum.UnwindTableKind(i)
		}
	}
	panic(fmt.Errorf("unable to locate UnwindTableKind enum corresponding to %q", s))
}

func _(s string) {
	// Check for duplicate string values in type "UnwindTableKind".
	switch s {
	// 0
	case "none":
	// 1
	case "sync":
	// 2
	case "async":
	}
}
