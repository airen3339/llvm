// Code generated by "string2enum -linecomment -type DwarfOp ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.DwarfOpAddr-3]
	_ = x[enum.DwarfOpDeref-6]
	_ = x[enum.DwarfOpConst1u-8]
	_ = x[enum.DwarfOpConst1s-9]
	_ = x[enum.DwarfOpConst2u-10]
	_ = x[enum.DwarfOpConst2s-11]
	_ = x[enum.DwarfOpConst4u-12]
	_ = x[enum.DwarfOpConst4s-13]
	_ = x[enum.DwarfOpConst8u-14]
	_ = x[enum.DwarfOpConst8s-15]
	_ = x[enum.DwarfOpConstu-16]
	_ = x[enum.DwarfOpConsts-17]
	_ = x[enum.DwarfOpDup-18]
	_ = x[enum.DwarfOpDrop-19]
	_ = x[enum.DwarfOpOver-20]
	_ = x[enum.DwarfOpPick-21]
	_ = x[enum.DwarfOpSwap-22]
	_ = x[enum.DwarfOpRot-23]
	_ = x[enum.DwarfOpXderef-24]
	_ = x[enum.DwarfOpAbs-25]
	_ = x[enum.DwarfOpAnd-26]
	_ = x[enum.DwarfOpDiv-27]
	_ = x[enum.DwarfOpMinus-28]
	_ = x[enum.DwarfOpMod-29]
	_ = x[enum.DwarfOpMul-30]
	_ = x[enum.DwarfOpNeg-31]
	_ = x[enum.DwarfOpNot-32]
	_ = x[enum.DwarfOpOr-33]
	_ = x[enum.DwarfOpPlus-34]
	_ = x[enum.DwarfOpPlusUconst-35]
	_ = x[enum.DwarfOpShl-36]
	_ = x[enum.DwarfOpShr-37]
	_ = x[enum.DwarfOpShra-38]
	_ = x[enum.DwarfOpXor-39]
	_ = x[enum.DwarfOpBra-40]
	_ = x[enum.DwarfOpEq-41]
	_ = x[enum.DwarfOpGe-42]
	_ = x[enum.DwarfOpGt-43]
	_ = x[enum.DwarfOpLe-44]
	_ = x[enum.DwarfOpLt-45]
	_ = x[enum.DwarfOpNe-46]
	_ = x[enum.DwarfOpSkip-47]
	_ = x[enum.DwarfOpLit0-48]
	_ = x[enum.DwarfOpLit1-49]
	_ = x[enum.DwarfOpLit2-50]
	_ = x[enum.DwarfOpLit3-51]
	_ = x[enum.DwarfOpLit4-52]
	_ = x[enum.DwarfOpLit5-53]
	_ = x[enum.DwarfOpLit6-54]
	_ = x[enum.DwarfOpLit7-55]
	_ = x[enum.DwarfOpLit8-56]
	_ = x[enum.DwarfOpLit9-57]
	_ = x[enum.DwarfOpLit10-58]
	_ = x[enum.DwarfOpLit11-59]
	_ = x[enum.DwarfOpLit12-60]
	_ = x[enum.DwarfOpLit13-61]
	_ = x[enum.DwarfOpLit14-62]
	_ = x[enum.DwarfOpLit15-63]
	_ = x[enum.DwarfOpLit16-64]
	_ = x[enum.DwarfOpLit17-65]
	_ = x[enum.DwarfOpLit18-66]
	_ = x[enum.DwarfOpLit19-67]
	_ = x[enum.DwarfOpLit20-68]
	_ = x[enum.DwarfOpLit21-69]
	_ = x[enum.DwarfOpLit22-70]
	_ = x[enum.DwarfOpLit23-71]
	_ = x[enum.DwarfOpLit24-72]
	_ = x[enum.DwarfOpLit25-73]
	_ = x[enum.DwarfOpLit26-74]
	_ = x[enum.DwarfOpLit27-75]
	_ = x[enum.DwarfOpLit28-76]
	_ = x[enum.DwarfOpLit29-77]
	_ = x[enum.DwarfOpLit30-78]
	_ = x[enum.DwarfOpLit31-79]
	_ = x[enum.DwarfOpReg0-80]
	_ = x[enum.DwarfOpReg1-81]
	_ = x[enum.DwarfOpReg2-82]
	_ = x[enum.DwarfOpReg3-83]
	_ = x[enum.DwarfOpReg4-84]
	_ = x[enum.DwarfOpReg5-85]
	_ = x[enum.DwarfOpReg6-86]
	_ = x[enum.DwarfOpReg7-87]
	_ = x[enum.DwarfOpReg8-88]
	_ = x[enum.DwarfOpReg9-89]
	_ = x[enum.DwarfOpReg10-90]
	_ = x[enum.DwarfOpReg11-91]
	_ = x[enum.DwarfOpReg12-92]
	_ = x[enum.DwarfOpReg13-93]
	_ = x[enum.DwarfOpReg14-94]
	_ = x[enum.DwarfOpReg15-95]
	_ = x[enum.DwarfOpReg16-96]
	_ = x[enum.DwarfOpReg17-97]
	_ = x[enum.DwarfOpReg18-98]
	_ = x[enum.DwarfOpReg19-99]
	_ = x[enum.DwarfOpReg20-100]
	_ = x[enum.DwarfOpReg21-101]
	_ = x[enum.DwarfOpReg22-102]
	_ = x[enum.DwarfOpReg23-103]
	_ = x[enum.DwarfOpReg24-104]
	_ = x[enum.DwarfOpReg25-105]
	_ = x[enum.DwarfOpReg26-106]
	_ = x[enum.DwarfOpReg27-107]
	_ = x[enum.DwarfOpReg28-108]
	_ = x[enum.DwarfOpReg29-109]
	_ = x[enum.DwarfOpReg30-110]
	_ = x[enum.DwarfOpReg31-111]
	_ = x[enum.DwarfOpBreg0-112]
	_ = x[enum.DwarfOpBreg1-113]
	_ = x[enum.DwarfOpBreg2-114]
	_ = x[enum.DwarfOpBreg3-115]
	_ = x[enum.DwarfOpBreg4-116]
	_ = x[enum.DwarfOpBreg5-117]
	_ = x[enum.DwarfOpBreg6-118]
	_ = x[enum.DwarfOpBreg7-119]
	_ = x[enum.DwarfOpBreg8-120]
	_ = x[enum.DwarfOpBreg9-121]
	_ = x[enum.DwarfOpBreg10-122]
	_ = x[enum.DwarfOpBreg11-123]
	_ = x[enum.DwarfOpBreg12-124]
	_ = x[enum.DwarfOpBreg13-125]
	_ = x[enum.DwarfOpBreg14-126]
	_ = x[enum.DwarfOpBreg15-127]
	_ = x[enum.DwarfOpBreg16-128]
	_ = x[enum.DwarfOpBreg17-129]
	_ = x[enum.DwarfOpBreg18-130]
	_ = x[enum.DwarfOpBreg19-131]
	_ = x[enum.DwarfOpBreg20-132]
	_ = x[enum.DwarfOpBreg21-133]
	_ = x[enum.DwarfOpBreg22-134]
	_ = x[enum.DwarfOpBreg23-135]
	_ = x[enum.DwarfOpBreg24-136]
	_ = x[enum.DwarfOpBreg25-137]
	_ = x[enum.DwarfOpBreg26-138]
	_ = x[enum.DwarfOpBreg27-139]
	_ = x[enum.DwarfOpBreg28-140]
	_ = x[enum.DwarfOpBreg29-141]
	_ = x[enum.DwarfOpBreg30-142]
	_ = x[enum.DwarfOpBreg31-143]
	_ = x[enum.DwarfOpRegx-144]
	_ = x[enum.DwarfOpFbreg-145]
	_ = x[enum.DwarfOpBregx-146]
	_ = x[enum.DwarfOpPiece-147]
	_ = x[enum.DwarfOpDerefSize-148]
	_ = x[enum.DwarfOpXderefSize-149]
	_ = x[enum.DwarfOpNop-150]
	_ = x[enum.DwarfOpPushObjectAddress-151]
	_ = x[enum.DwarfOpCall2-152]
	_ = x[enum.DwarfOpCall4-153]
	_ = x[enum.DwarfOpCallRef-154]
	_ = x[enum.DwarfOpFormTLSAddress-155]
	_ = x[enum.DwarfOpCallFrameCFA-156]
	_ = x[enum.DwarfOpBitPiece-157]
	_ = x[enum.DwarfOpImplicitValue-158]
	_ = x[enum.DwarfOpStackValue-159]
	_ = x[enum.DwarfOpImplicitPointer-160]
	_ = x[enum.DwarfOpAddrx-161]
	_ = x[enum.DwarfOpConstx-162]
	_ = x[enum.DwarfOpEntryValue-163]
	_ = x[enum.DwarfOpConstType-164]
	_ = x[enum.DwarfOpRegvalType-165]
	_ = x[enum.DwarfOpDerefType-166]
	_ = x[enum.DwarfOpXderefType-167]
	_ = x[enum.DwarfOpConvert-168]
	_ = x[enum.DwarfOpReinterpret-169]
	_ = x[enum.DwarfOpGNUPushTLSAddress-224]
	_ = x[enum.DwarfOpGNUEntryValue-243]
	_ = x[enum.DwarfOpGNUAddrIndex-251]
	_ = x[enum.DwarfOpGNUConstIndex-252]
	_ = x[enum.DwarfOpLLVMFragment-4096]
	_ = x[enum.DwarfOpLLVMConvert-4097]
	_ = x[enum.DwarfOpLLVMTagOffset-4098]
}

const (
	_DwarfOp_name_0 = "DW_OP_addr"
	_DwarfOp_name_1 = "DW_OP_deref"
	_DwarfOp_name_2 = "DW_OP_const1uDW_OP_const1sDW_OP_const2uDW_OP_const2sDW_OP_const4uDW_OP_const4sDW_OP_const8uDW_OP_const8sDW_OP_constuDW_OP_constsDW_OP_dupDW_OP_dropDW_OP_overDW_OP_pickDW_OP_swapDW_OP_rotDW_OP_xderefDW_OP_absDW_OP_andDW_OP_divDW_OP_minusDW_OP_modDW_OP_mulDW_OP_negDW_OP_notDW_OP_orDW_OP_plusDW_OP_plus_uconstDW_OP_shlDW_OP_shrDW_OP_shraDW_OP_xorDW_OP_braDW_OP_eqDW_OP_geDW_OP_gtDW_OP_leDW_OP_ltDW_OP_neDW_OP_skipDW_OP_lit0DW_OP_lit1DW_OP_lit2DW_OP_lit3DW_OP_lit4DW_OP_lit5DW_OP_lit6DW_OP_lit7DW_OP_lit8DW_OP_lit9DW_OP_lit10DW_OP_lit11DW_OP_lit12DW_OP_lit13DW_OP_lit14DW_OP_lit15DW_OP_lit16DW_OP_lit17DW_OP_lit18DW_OP_lit19DW_OP_lit20DW_OP_lit21DW_OP_lit22DW_OP_lit23DW_OP_lit24DW_OP_lit25DW_OP_lit26DW_OP_lit27DW_OP_lit28DW_OP_lit29DW_OP_lit30DW_OP_lit31DW_OP_reg0DW_OP_reg1DW_OP_reg2DW_OP_reg3DW_OP_reg4DW_OP_reg5DW_OP_reg6DW_OP_reg7DW_OP_reg8DW_OP_reg9DW_OP_reg10DW_OP_reg11DW_OP_reg12DW_OP_reg13DW_OP_reg14DW_OP_reg15DW_OP_reg16DW_OP_reg17DW_OP_reg18DW_OP_reg19DW_OP_reg20DW_OP_reg21DW_OP_reg22DW_OP_reg23DW_OP_reg24DW_OP_reg25DW_OP_reg26DW_OP_reg27DW_OP_reg28DW_OP_reg29DW_OP_reg30DW_OP_reg31DW_OP_breg0DW_OP_breg1DW_OP_breg2DW_OP_breg3DW_OP_breg4DW_OP_breg5DW_OP_breg6DW_OP_breg7DW_OP_breg8DW_OP_breg9DW_OP_breg10DW_OP_breg11DW_OP_breg12DW_OP_breg13DW_OP_breg14DW_OP_breg15DW_OP_breg16DW_OP_breg17DW_OP_breg18DW_OP_breg19DW_OP_breg20DW_OP_breg21DW_OP_breg22DW_OP_breg23DW_OP_breg24DW_OP_breg25DW_OP_breg26DW_OP_breg27DW_OP_breg28DW_OP_breg29DW_OP_breg30DW_OP_breg31DW_OP_regxDW_OP_fbregDW_OP_bregxDW_OP_pieceDW_OP_deref_sizeDW_OP_xderef_sizeDW_OP_nopDW_OP_push_object_addressDW_OP_call2DW_OP_call4DW_OP_call_refDW_OP_form_tls_addressDW_OP_call_frame_cfaDW_OP_bit_pieceDW_OP_implicit_valueDW_OP_stack_valueDW_OP_implicit_pointerDW_OP_addrxDW_OP_constxDW_OP_entry_valueDW_OP_const_typeDW_OP_regval_typeDW_OP_deref_typeDW_OP_xderef_typeDW_OP_convertDW_OP_reinterpret"
	_DwarfOp_name_3 = "DW_OP_GNU_push_tls_address"
	_DwarfOp_name_4 = "DW_OP_GNU_entry_value"
	_DwarfOp_name_5 = "DW_OP_GNU_addr_indexDW_OP_GNU_const_index"
	_DwarfOp_name_6 = "DW_OP_LLVM_fragmentDW_OP_LLVM_convertDW_OP_LLVM_tag_offset"
)

var (
	_DwarfOp_index_2 = [...]uint16{0, 13, 26, 39, 52, 65, 78, 91, 104, 116, 128, 137, 147, 157, 167, 177, 186, 198, 207, 216, 225, 236, 245, 254, 263, 272, 280, 290, 307, 316, 325, 335, 344, 353, 361, 369, 377, 385, 393, 401, 411, 421, 431, 441, 451, 461, 471, 481, 491, 501, 511, 522, 533, 544, 555, 566, 577, 588, 599, 610, 621, 632, 643, 654, 665, 676, 687, 698, 709, 720, 731, 742, 753, 763, 773, 783, 793, 803, 813, 823, 833, 843, 853, 864, 875, 886, 897, 908, 919, 930, 941, 952, 963, 974, 985, 996, 1007, 1018, 1029, 1040, 1051, 1062, 1073, 1084, 1095, 1106, 1117, 1128, 1139, 1150, 1161, 1172, 1183, 1194, 1205, 1217, 1229, 1241, 1253, 1265, 1277, 1289, 1301, 1313, 1325, 1337, 1349, 1361, 1373, 1385, 1397, 1409, 1421, 1433, 1445, 1457, 1469, 1479, 1490, 1501, 1512, 1528, 1545, 1554, 1579, 1590, 1601, 1615, 1637, 1657, 1672, 1692, 1709, 1731, 1742, 1754, 1771, 1787, 1804, 1820, 1837, 1850, 1867}
	_DwarfOp_index_5 = [...]uint8{0, 20, 41}
	_DwarfOp_index_6 = [...]uint8{0, 19, 37, 58}
)

// DwarfOpFromString returns the DwarfOp enum corresponding to s.
func DwarfOpFromString(s string) enum.DwarfOp {
	if len(s) == 0 {
		return 0
	}
	if s == _DwarfOp_name_0 {
		return enum.DwarfOp(3)
	}
	if s == _DwarfOp_name_1 {
		return enum.DwarfOp(6)
	}
	for i := range _DwarfOp_index_2[:len(_DwarfOp_index_2)-1] {
		if s == _DwarfOp_name_2[_DwarfOp_index_2[i]:_DwarfOp_index_2[i+1]] {
			return enum.DwarfOp(i + 8)
		}
	}
	if s == _DwarfOp_name_3 {
		return enum.DwarfOp(224)
	}
	if s == _DwarfOp_name_4 {
		return enum.DwarfOp(243)
	}
	for i := range _DwarfOp_index_5[:len(_DwarfOp_index_5)-1] {
		if s == _DwarfOp_name_5[_DwarfOp_index_5[i]:_DwarfOp_index_5[i+1]] {
			return enum.DwarfOp(i + 251)
		}
	}
	for i := range _DwarfOp_index_6[:len(_DwarfOp_index_6)-1] {
		if s == _DwarfOp_name_6[_DwarfOp_index_6[i]:_DwarfOp_index_6[i+1]] {
			return enum.DwarfOp(i + 4096)
		}
	}
	panic(fmt.Errorf("unable to locate DwarfOp enum corresponding to %q", s))
}

func _(s string) {
	// Check for duplicate string values in type "DwarfOp".
	switch s {
	// 3
	case "DW_OP_addr":
	// 6
	case "DW_OP_deref":
	// 8
	case "DW_OP_const1u":
	// 9
	case "DW_OP_const1s":
	// 10
	case "DW_OP_const2u":
	// 11
	case "DW_OP_const2s":
	// 12
	case "DW_OP_const4u":
	// 13
	case "DW_OP_const4s":
	// 14
	case "DW_OP_const8u":
	// 15
	case "DW_OP_const8s":
	// 16
	case "DW_OP_constu":
	// 17
	case "DW_OP_consts":
	// 18
	case "DW_OP_dup":
	// 19
	case "DW_OP_drop":
	// 20
	case "DW_OP_over":
	// 21
	case "DW_OP_pick":
	// 22
	case "DW_OP_swap":
	// 23
	case "DW_OP_rot":
	// 24
	case "DW_OP_xderef":
	// 25
	case "DW_OP_abs":
	// 26
	case "DW_OP_and":
	// 27
	case "DW_OP_div":
	// 28
	case "DW_OP_minus":
	// 29
	case "DW_OP_mod":
	// 30
	case "DW_OP_mul":
	// 31
	case "DW_OP_neg":
	// 32
	case "DW_OP_not":
	// 33
	case "DW_OP_or":
	// 34
	case "DW_OP_plus":
	// 35
	case "DW_OP_plus_uconst":
	// 36
	case "DW_OP_shl":
	// 37
	case "DW_OP_shr":
	// 38
	case "DW_OP_shra":
	// 39
	case "DW_OP_xor":
	// 40
	case "DW_OP_bra":
	// 41
	case "DW_OP_eq":
	// 42
	case "DW_OP_ge":
	// 43
	case "DW_OP_gt":
	// 44
	case "DW_OP_le":
	// 45
	case "DW_OP_lt":
	// 46
	case "DW_OP_ne":
	// 47
	case "DW_OP_skip":
	// 48
	case "DW_OP_lit0":
	// 49
	case "DW_OP_lit1":
	// 50
	case "DW_OP_lit2":
	// 51
	case "DW_OP_lit3":
	// 52
	case "DW_OP_lit4":
	// 53
	case "DW_OP_lit5":
	// 54
	case "DW_OP_lit6":
	// 55
	case "DW_OP_lit7":
	// 56
	case "DW_OP_lit8":
	// 57
	case "DW_OP_lit9":
	// 58
	case "DW_OP_lit10":
	// 59
	case "DW_OP_lit11":
	// 60
	case "DW_OP_lit12":
	// 61
	case "DW_OP_lit13":
	// 62
	case "DW_OP_lit14":
	// 63
	case "DW_OP_lit15":
	// 64
	case "DW_OP_lit16":
	// 65
	case "DW_OP_lit17":
	// 66
	case "DW_OP_lit18":
	// 67
	case "DW_OP_lit19":
	// 68
	case "DW_OP_lit20":
	// 69
	case "DW_OP_lit21":
	// 70
	case "DW_OP_lit22":
	// 71
	case "DW_OP_lit23":
	// 72
	case "DW_OP_lit24":
	// 73
	case "DW_OP_lit25":
	// 74
	case "DW_OP_lit26":
	// 75
	case "DW_OP_lit27":
	// 76
	case "DW_OP_lit28":
	// 77
	case "DW_OP_lit29":
	// 78
	case "DW_OP_lit30":
	// 79
	case "DW_OP_lit31":
	// 80
	case "DW_OP_reg0":
	// 81
	case "DW_OP_reg1":
	// 82
	case "DW_OP_reg2":
	// 83
	case "DW_OP_reg3":
	// 84
	case "DW_OP_reg4":
	// 85
	case "DW_OP_reg5":
	// 86
	case "DW_OP_reg6":
	// 87
	case "DW_OP_reg7":
	// 88
	case "DW_OP_reg8":
	// 89
	case "DW_OP_reg9":
	// 90
	case "DW_OP_reg10":
	// 91
	case "DW_OP_reg11":
	// 92
	case "DW_OP_reg12":
	// 93
	case "DW_OP_reg13":
	// 94
	case "DW_OP_reg14":
	// 95
	case "DW_OP_reg15":
	// 96
	case "DW_OP_reg16":
	// 97
	case "DW_OP_reg17":
	// 98
	case "DW_OP_reg18":
	// 99
	case "DW_OP_reg19":
	// 100
	case "DW_OP_reg20":
	// 101
	case "DW_OP_reg21":
	// 102
	case "DW_OP_reg22":
	// 103
	case "DW_OP_reg23":
	// 104
	case "DW_OP_reg24":
	// 105
	case "DW_OP_reg25":
	// 106
	case "DW_OP_reg26":
	// 107
	case "DW_OP_reg27":
	// 108
	case "DW_OP_reg28":
	// 109
	case "DW_OP_reg29":
	// 110
	case "DW_OP_reg30":
	// 111
	case "DW_OP_reg31":
	// 112
	case "DW_OP_breg0":
	// 113
	case "DW_OP_breg1":
	// 114
	case "DW_OP_breg2":
	// 115
	case "DW_OP_breg3":
	// 116
	case "DW_OP_breg4":
	// 117
	case "DW_OP_breg5":
	// 118
	case "DW_OP_breg6":
	// 119
	case "DW_OP_breg7":
	// 120
	case "DW_OP_breg8":
	// 121
	case "DW_OP_breg9":
	// 122
	case "DW_OP_breg10":
	// 123
	case "DW_OP_breg11":
	// 124
	case "DW_OP_breg12":
	// 125
	case "DW_OP_breg13":
	// 126
	case "DW_OP_breg14":
	// 127
	case "DW_OP_breg15":
	// 128
	case "DW_OP_breg16":
	// 129
	case "DW_OP_breg17":
	// 130
	case "DW_OP_breg18":
	// 131
	case "DW_OP_breg19":
	// 132
	case "DW_OP_breg20":
	// 133
	case "DW_OP_breg21":
	// 134
	case "DW_OP_breg22":
	// 135
	case "DW_OP_breg23":
	// 136
	case "DW_OP_breg24":
	// 137
	case "DW_OP_breg25":
	// 138
	case "DW_OP_breg26":
	// 139
	case "DW_OP_breg27":
	// 140
	case "DW_OP_breg28":
	// 141
	case "DW_OP_breg29":
	// 142
	case "DW_OP_breg30":
	// 143
	case "DW_OP_breg31":
	// 144
	case "DW_OP_regx":
	// 145
	case "DW_OP_fbreg":
	// 146
	case "DW_OP_bregx":
	// 147
	case "DW_OP_piece":
	// 148
	case "DW_OP_deref_size":
	// 149
	case "DW_OP_xderef_size":
	// 150
	case "DW_OP_nop":
	// 151
	case "DW_OP_push_object_address":
	// 152
	case "DW_OP_call2":
	// 153
	case "DW_OP_call4":
	// 154
	case "DW_OP_call_ref":
	// 155
	case "DW_OP_form_tls_address":
	// 156
	case "DW_OP_call_frame_cfa":
	// 157
	case "DW_OP_bit_piece":
	// 158
	case "DW_OP_implicit_value":
	// 159
	case "DW_OP_stack_value":
	// 160
	case "DW_OP_implicit_pointer":
	// 161
	case "DW_OP_addrx":
	// 162
	case "DW_OP_constx":
	// 163
	case "DW_OP_entry_value":
	// 164
	case "DW_OP_const_type":
	// 165
	case "DW_OP_regval_type":
	// 166
	case "DW_OP_deref_type":
	// 167
	case "DW_OP_xderef_type":
	// 168
	case "DW_OP_convert":
	// 169
	case "DW_OP_reinterpret":
	// 224
	case "DW_OP_GNU_push_tls_address":
	// 243
	case "DW_OP_GNU_entry_value":
	// 251
	case "DW_OP_GNU_addr_index":
	// 252
	case "DW_OP_GNU_const_index":
	// 4096
	case "DW_OP_LLVM_fragment":
	// 4097
	case "DW_OP_LLVM_convert":
	// 4098
	case "DW_OP_LLVM_tag_offset":
	}
}
